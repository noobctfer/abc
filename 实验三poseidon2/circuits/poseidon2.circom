pragma circom 2.1.4;

// === Poseidon2 Constants ===
template RoundConstants() {
    signal output C[8][3];
    C[0][0] <-- 19175298877124319796382317946554039608964882809117326509318893241644988174384;
    C[0][1] <-- 11671872283825544926648937948809544779351844185156771968484059186419502598613;
    C[0][2] <-- 3283110830713342473416265060070910637772157847836607098321101825749418883300;
    C[1][0] <-- 921630510603633887565123835283116771313372695514610976942602545733107769224;
    C[1][1] <-- 11177994965979360076731018442355933263474282326731993723011573680646285000809;
    C[1][2] <-- 13591851328185097032975119604115196408761840012689572835736562210320858217268;
    C[2][0] <-- 8747106434937594348907280946257281572289987459404680403398867799790718257712;
    C[2][1] <-- 4130512234862351969451573943746863474901827549438126866933868770988411391881;
    C[2][2] <-- 5210248031302358830957864653750635051190524252664095003950468369058548683248;
    C[3][0] <-- 19690761280925115384324264006493667564573503145922714549069417661736806233597;
    C[3][1] <-- 16811745330241306764556174059580617890160665002274284854107008403307086108915;
    C[3][2] <-- 8376721778258762515629426554796061355474319673325486324934974063262776198028;
    C[4][0] <-- 8837308849595509741379977679226131579909100284745560251197168423476267238379;
    C[4][1] <-- 13980837981436962667756063908867294200616048429331540791530265899095363126508;
    C[4][2] <-- 6325071530202429356954982797487430313287739765879043128429085801922898082282;
    C[5][0] <-- 19673567117535602754700386422774300473815571455457411694309122413507093090051;
    C[5][1] <-- 10003817989346492520286396416496421739973001470253037501334956078844608954611;
    C[5][2] <-- 4467293677719441415967118910433153133333276168450854397705287041547354885208;
    C[6][0] <-- 14144546118012255159119605454222818974309035982471118914873286655240924220682;
    C[6][1] <-- 9967549477499574961433010910308614492853354523920745492173933701765833303023;
    C[6][2] <-- 5899596989719369928578776640373398785133382475112628748625030953673043058567;
    C[7][0] <-- 2493017450325604680321777374347095304910815023940832288424682804599893638795;
    C[7][1] <-- 12741733616587169252289308198926892046204655210993308388030831408283955626670;
    C[7][2] <-- 19660879128645005861000080130852828320243706930832740489145216261047298021971;
}

// === Poseidon2 MDS Matrix ===
template MDS3() {
    signal input in[3];
    signal output out[3];

    out[0] <==
        in[0] * 12810957975001386618848339165548767821722778730941606605995519448152936617599 +
        in[1] * 16369572791573912954706050191862505827054587220243601259420596814870798898297 +
        in[2] * 4620465220739874132279214158127200517631956005948865690802965565508648428715;

    out[1] <==
        in[0] * 17305741493122262444314586742450127409066936734568923612841165919617065779923 +
        in[1] * 7907809759198195573720387003811861560536720808036104587392703632653234707499 +
        in[2] * 4200280149653348467545474779442892645887803819300714811029596253130570439526;

    out[2] <==
        in[0] * 4491162755494646422778109136440614503773837216667951029469771422020100022884 +
        in[1] * 2182590968521226679616125365211878100409499826511954758233871941120607500452 +
        in[2] * 4452785301852414071660028697787346930065428424928523833607669872176984717352;
}


// 计算 x^5 的 S-Box
template QuinticSBox() {
    signal input in;
    signal output out;

    signal sq;
    signal quad;

    sq <== in * in;
    quad <== sq * sq;
    out <== in * quad;
}

template Poseidon2_3() {
    signal input in[2];
    signal input hash_expected[1];
    signal output isValid;

    component rc = RoundConstants();
    component sbox[3][8];
    component mds[8];

    signal states[9][3];
    signal stateWithRC[8][3];  // 提前声明循环中会用的信号

    // 初始化
    states[0][0] <== in[0];
    states[0][1] <== in[1];
    states[0][2] <== 0;

    for (var r = 0; r < 8; r++) {
        // 计算加常数的状态
        for (var i = 0; i < 3; i++) {
            stateWithRC[r][i] <== states[r][i] + rc.C[r][i];
        }

        // S-box 组件实例化
        for (var i = 0; i < 3; i++) {
            sbox[i][r] = QuinticSBox();
            sbox[i][r].in <== stateWithRC[r][i];
        }

        // MDS 组件实例化
        mds[r] = MDS3();
        for (var i = 0; i < 3; i++) {
            mds[r].in[i] <== sbox[i][r].out;
        }

        // 更新状态
        for (var i = 0; i < 3; i++) {
            states[r + 1][i] <== mds[r].out[i];
        }
    }

    // 验证输出
    assert(states[8][0] == hash_expected[0]);

    isValid <== 1;
}

component main = Poseidon2_3();
